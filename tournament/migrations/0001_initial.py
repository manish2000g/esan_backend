# Generated by Django 4.2 on 2023-04-20 06:56

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FFAMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(auto_now_add=True)),
                ('game_type', models.CharField(choices=[('SOLO', 'Solo'), ('DUO', 'Duo'), ('TEAM', 'Team')], max_length=10)),
                ('game_mode', models.CharField(choices=[('ONLINE', 'Online'), ('OFFLINE', 'Offline')], max_length=10)),
                ('rules', ckeditor.fields.RichTextField()),
                ('location', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('DUEL', 'Duel'), ('FFA', 'Free for All')], max_length=4)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('result', models.CharField(choices=[('player_1', 'Player 1 wins'), ('player_2', 'Player 2 wins'), ('draw', 'Draw')], max_length=10)),
                ('is_completed', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.game')),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team_1', to='account.player')),
                ('player_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team_2', to='account.player')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=500)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(auto_now=True)),
                ('location', models.CharField(max_length=300)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.organizer')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentBracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('WINNER', 'Winner'), ('LOSER', 'Loser'), ('SEMIFINALS', 'Semifinals'), ('FINALS', 'Finals')], max_length=50)),
                ('round', models.PositiveSmallIntegerField()),
                ('loser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lost_brackets', to='account.team')),
                ('matches', models.ManyToManyField(related_name='brackets', to='tournament.match')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brackets', to='tournament.tournament')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_brackets', to='account.team')),
            ],
            options={
                'ordering': ['round'],
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('logo', models.ImageField(null=True, upload_to='sponsor_logos/')),
                ('type', models.CharField(choices=[('title', 'Title Sponsor'), ('presenting', 'Presenting Sponsor'), ('official', 'Official Sponsor'), ('media', 'Media Partner'), ('support', 'Support Sponsor'), ('technical', 'Technical Sponsor'), ('gaming', 'Gaming Partner'), ('food_and_beverages', 'Food and Beverages Sponsor'), ('venue', 'Venue Sponsor'), ('merchandise', 'Merchandise Partner'), ('broadcast', 'Broadcast Partner')], max_length=40)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('result', models.CharField(choices=[('player_1', 'Player 1 wins'), ('player_2', 'Player 2 wins'), ('draw', 'Draw')], max_length=10)),
                ('duel_score_1', models.PositiveIntegerField(blank=True, null=True)),
                ('duel_score_2', models.PositiveIntegerField(blank=True, null=True)),
                ('ffa_scores', models.PositiveIntegerField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_result', to='tournament.match')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_logo', models.ImageField(upload_to='team_logos/')),
                ('is_paid', models.BooleanField(default=False)),
                ('captain', models.ManyToManyField(related_name='captain', to='account.player')),
                ('players', models.ManyToManyField(blank=True, related_name='registrations', to='account.player')),
                ('team_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='PrizePool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('1st', '1st Place'), ('2nd', '2nd Place'), ('3rd', '3rd Place')], max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('extras', models.CharField(max_length=100)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='LivePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_url', models.URLField(blank=True, null=True)),
                ('chat_url', models.URLField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.game')),
                ('tournament', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament'),
        ),
        migrations.CreateModel(
            name='FFAScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.ffamatch')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.player')),
            ],
        ),
        migrations.AddField(
            model_name='ffamatch',
            name='match',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.match'),
        ),
        migrations.AddField(
            model_name='ffamatch',
            name='players',
            field=models.ManyToManyField(related_name='ffa_matches_players', to='account.player'),
        ),
        migrations.AddField(
            model_name='ffamatch',
            name='scores',
            field=models.ManyToManyField(through='tournament.FFAScore', to='account.player'),
        ),
        migrations.CreateModel(
            name='DuelMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_1', models.PositiveIntegerField(blank=True, null=True)),
                ('score_2', models.PositiveIntegerField(blank=True, null=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.match')),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duel_matches_player1', to='account.player')),
                ('player_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duel_matches_player2', to='account.player')),
            ],
        ),
        migrations.CreateModel(
            name='BannerImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='tournament_banners/')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_published', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
    ]
