# Generated by Django 4.2 on 2023-04-26 11:49

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=255)),
                ('description', ckeditor.fields.RichTextField(blank=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.organizer')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='FFAMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_platform', models.CharField(choices=[('mobile', 'Mobile'), ('console', 'Console'), ('pc', 'PC')], max_length=15)),
                ('name', models.CharField(max_length=300)),
                ('game_type', models.CharField(choices=[('SINGLE', 'Single'), ('DOUBLE', 'Double'), ('SWISS SYSTEM', 'Swiss system'), ('LEAGUE', 'League'), ('ROUND ROBINS', 'Round Robins'), ('BATTLE ROYAL', 'Battle Royal')], max_length=20)),
                ('game_mode', models.CharField(choices=[('ONLINE', 'Online'), ('OFFLINE', 'Offline')], max_length=10)),
                ('description', ckeditor.fields.RichTextField()),
                ('location', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('group_number', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('DUEL', 'Duel'), ('FFA', 'Free for All')], max_length=4)),
                ('match_number', models.IntegerField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('result', models.CharField(choices=[('player_1', 'Player 1 wins'), ('player_2', 'Player 2 wins'), ('draw', 'Draw')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='pending', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('captain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='captain_of', to='account.player')),
                ('members', models.ManyToManyField(blank=True, related_name='member_of', to='account.player')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='account.organization')),
                ('team_manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manager_of', to='account.player')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', ckeditor.fields.RichTextField()),
                ('registration_end_date', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(auto_now=True)),
                ('location', models.CharField(max_length=300)),
                ('entry_fee', models.DecimalField(decimal_places=2, max_digits=8)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.event')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.organizer')),
                ('player', models.ManyToManyField(blank=True, related_name='players', to='account.player')),
                ('team', models.ManyToManyField(blank=True, related_name='teams', to='tournament.team')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentBracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('single_elimination', 'Single Elimination'), ('double_elimination', 'Double Elimination'), ('round_robin', 'Round Robin')], max_length=50)),
                ('number_of_rounds', models.PositiveSmallIntegerField()),
                ('rounds_per_match', models.IntegerField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('number_of_teams', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('loser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lost_brackets', to='tournament.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brackets', to='tournament.tournament')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_brackets', to='tournament.team')),
            ],
            options={
                'ordering': ['number_of_rounds'],
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('logo', models.ImageField(null=True, upload_to='sponsor_logos/')),
                ('type', models.CharField(choices=[('title', 'Title Sponsor'), ('presenting', 'Presenting Sponsor'), ('official', 'Official Sponsor'), ('media', 'Media Partner'), ('support', 'Support Sponsor'), ('technical', 'Technical Sponsor'), ('gaming', 'Gaming Partner'), ('food_and_beverages', 'Food and Beverages Sponsor'), ('venue', 'Venue Sponsor'), ('merchandise', 'Merchandise Partner'), ('broadcast', 'Broadcast Partner')], max_length=40)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('venue', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='tournament.match')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('bracket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournamentbracket')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('result', models.CharField(choices=[('player_1', 'Player 1 wins'), ('player_2', 'Player 2 wins'), ('draw', 'Draw')], max_length=10)),
                ('duel_score_1', models.PositiveIntegerField(blank=True, null=True)),
                ('duel_score_2', models.PositiveIntegerField(blank=True, null=True)),
                ('ffa_scores', models.PositiveIntegerField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_result', to='tournament.match')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_type', models.CharField(choices=[('TEAM', 'Team'), ('PLAYER', 'Player')], max_length=10)),
                ('is_paid', models.BooleanField(default=False)),
                ('captain', models.ManyToManyField(related_name='captain', to='account.player')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='account.player')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='PrizePool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('extras', models.CharField(blank=True, max_length=100)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='bracket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournamentbracket'),
        ),
        migrations.AddField(
            model_name='match',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.game'),
        ),
        migrations.AddField(
            model_name='match',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.group'),
        ),
        migrations.AddField(
            model_name='match',
            name='player_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team_1', to='account.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='player_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team_2', to='account.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.round'),
        ),
        migrations.CreateModel(
            name='LivePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_url', models.URLField(blank=True, null=True)),
                ('chat_url', models.URLField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.game')),
                ('tournament', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='bracket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournamentbracket'),
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament'),
        ),
        migrations.CreateModel(
            name='FFAScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.ffamatch')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.player')),
            ],
        ),
        migrations.AddField(
            model_name='ffamatch',
            name='match',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.match'),
        ),
        migrations.AddField(
            model_name='ffamatch',
            name='players',
            field=models.ManyToManyField(related_name='ffa_matches_players', to='account.player'),
        ),
        migrations.AddField(
            model_name='ffamatch',
            name='scores',
            field=models.ManyToManyField(through='tournament.FFAScore', to='account.player'),
        ),
        migrations.CreateModel(
            name='DuelMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_1', models.PositiveIntegerField(blank=True, null=True)),
                ('score_2', models.PositiveIntegerField(blank=True, null=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.match')),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duel_matches_player1', to='account.player')),
                ('player_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duel_matches_player2', to='account.player')),
            ],
        ),
        migrations.CreateModel(
            name='BannerImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='tournament_banners/')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_published', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
    ]
